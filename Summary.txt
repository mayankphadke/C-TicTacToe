Code that plays Tic Tac Toe

Summary: This is a code that plays Tic Tac Toe and wins or draws against a human opponent almost every time.
         You still can beat it, but if the code plays first, it's very very hard to beat it and even when you play
         first, it's very hart to beat the code.
         It is easily possible to hardcode for some combinations where the code loses, but I felt it's a little more
         interesting when you can actually win.


A. Standard 2 Player Mode
    Basic starting point of the project. Takes input from 2 players, ensures their inputs are valid and checks for a win.
    Has functions to display the board, check validity of input and check for a win, loss or draw.

B. Genrating All Possible Games
    Assigning numbers 1-9 to the nine squares, we can have 9!= 362880 different games, from 123456789 to 987654321.
    We have to find all possible permutations of these digits. I have used a recursive fuction to find all the possible permutations.
    Any one of these numbers, say 625184793 is a sequence of moves that represents a unique game, and there is obviously no game possible outside of these
    362880 games. Every one of these games will result in a Win, Loss or Draw.

C. Simulator
    By modifying the 2 Player Mode code, I created a simulator which plays moves according to every sequence generated by the above code.
    It plays every code and determines whether the game is a win, loss or draw for the player playing first. It copies the winning, losing and drawn sequences
    to separate files.

D. Final Code
    Consider the first move. By going through the first moves of all the winning, losing and drawing combinations from the above section of the code,
    we can determine the optimal move, by assigning positive weights to the winning move, negative weights to losing moves and neutral weights to draws.
    Accordingly, we play the first move. The opponent plays his move and then, narrowing our search to sequences with the first two moves, we can similarly
    determine the next move and so on.
    Similarly, the code can play and alter it's move according to the opponent's move.
